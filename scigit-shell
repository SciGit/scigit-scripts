#!/usr/bin/php
<?

require_once '/var/scigit/include/scigit.php';

scigit_db_connect();

function error($str) {
	$stderr = fopen('php://stderr', 'w');
	fprintf($stderr, "scigit: $str\n");
	exit(1);
}

function check_permissions($proj_id, $user_id, $write) {
	$q = mysql_query("SELECT * FROM proj_permissions ".
		"WHERE proj_id = $proj_id AND user_id = $user_id");
	if (!$q) error('Database error: ' . mysql_error());
	if ($r = mysql_fetch_assoc($q)) {
		if (!$write || $r['can_write']) {
			return;
		}
	}
	error('not authorized (or wrong repository)');
}

// get user id
if (!preg_match('/^u([0-9]+)$/', $argv[1], $matches)) {
	error("Invalid user id $argv[1]");
}
$user_id = $matches[1];

$pkey_id = intval($argv[2]);
$q = mysql_query("SELECT * FROM user_pub_keys WHERE ".
		"id = $pkey_id AND user_id = $user_id");
if (!$q) error('Database error: ' . mysql_error());
if (mysql_num_rows($q) == 0) {
	error('Permission denied (publickey)');
}

// parse git command for repository
$soc = getenv('SSH_ORIGINAL_COMMAND');

$git_commands = "git-upload-pack|git-receive-pack|git-upload-archive";
if (!preg_match("/^($git_commands) '(.*?)(\.git)?'$/", $soc, $matches)) {
	error("Invalid git command");
}

$verb = $matches[1];
$repo_name = $matches[2];
if (!preg_match('/^r([0-9]+)$/', $repo_name, $matches)) {
	error("Invalid repository");
}
$repo_id = $matches[1];

if ($user_id != 0) {
	check_permissions($repo_id, $user_id, strpos($verb, 'upload') !== false);
}

putenv("SCIGIT_USER_ID=$user_id");
pcntl_exec("/usr/bin/git", array("shell", "-c", "$verb 'repositories/$repo_name'"));
