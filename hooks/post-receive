#!/usr/bin/python27
# Add the commit to the scigit database and update the usable repo.

import os, sys
import subprocess
import MySQLdb

def error(msg):
  sys.stderr.write("scigit: %s\n" % msg)
  sys.exit(1)

dbc = MySQLdb.connect(user='scigit', passwd='scigit', db='rails')

repoid = int(subprocess.check_output(['git', 'config', 'scigit.repo.id']))
userid = int(os.getenv('SCIGIT_USER_ID'))

# Get the last saved commit
cursor = dbc.cursor()
cursor.execute("""SELECT commit_hash FROM project_changes
  WHERE project_id = %s ORDER BY id DESC LIMIT 1""", (repoid,))
result = cursor.fetchone()
old = result[0] if result != None else ''

# Insert new commits into database
for line in sys.stdin.readlines():
  _, new, ref = line.split()
  if ref != 'refs/heads/master':
    error('branches are not supported')

  args = []
  # Don't include the fake initial commit.
  first = False
  if old.count('0') == len(old):
    args = ['git', 'log', '--pretty=%H %at %s', new]
    first = True
  else:
    args = ['git', 'log', '--pretty=%H %at %s', old + '..' + new]
  commits = subprocess.check_output(args).splitlines()

  for commit in reversed(commits):
    hash, date, msg = commit.split(None, 2)
    cursor = dbc.cursor()
    cursor.execute("""INSERT INTO project_changes
      (project_id, user_id, commit_msg, commit_hash, commit_timestamp) VALUES
      (%s, %s, %s, %s, %s)""", (repoid, userid, msg, hash, date))
    #if not first:
    #  change_id = cursor.lastrowid
    #  cursor.execute("""INSERT INTO email_queue
    #    (change_id) VALUES (%s)""", (change_id))
    first = False
    dbc.commit()

# Pull into local accessible repository
repodir = '/var/scigit/repos'
os.chdir(repodir)
reponame = 'r' + str(repoid)
if os.path.isdir(reponame):
  os.chdir(reponame)
  subprocess.check_output(
      ['env', '-i', 'git', 'pull'], stderr=subprocess.STDOUT)
else:
  subprocess.check_output(
      ['env', '-i', 'git', 'clone', 'git@localhost:%s' % reponame])
  os.chdir(reponame)
  subprocess.check_output(
      ['env', '-i', 'git', 'config', 'core.fileMode', 'false'])
subprocess.check_output(
    ['env', '-i', 'chmod', '755', '-R', '%s/%s' % (repodir, reponame)])
